%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_rpc_compile
-module(msg_router).
-behavior(ege_msg).
-include("msg.hrl").
-include_lib("ege_net/include/ege_msg.hrl").

%% API
-export([
    dispatch_msg/3,
    handle_pass/3,
    encode_req_msg/1,
    encode_resp_msg/1,
    decode_req_msg/1,
    decode_resp_msg/1,
    msg_type/1,
    msg_cmd/1,
    msg_ccmd/1,
    msg_cmd16/1
]).

-compile(inline).

-spec dispatch_msg(ege_msg:cmd16(), ege_msg:request(), ege_msg:state()) -> ege_msg:resp_maps().
dispatch_msg(?CMD_MSG_BASE_HEARTBEAT_REQ, Request, State) ->
    Maps = case Request of
               {MsgType, Binary} ->
                   Msg = msg_base_pb:decode_msg(Binary, heartbeat_req),
                   mod_base:heartbeat({MsgType, Msg}, State);
               Binary ->
                   Msg = msg_base_pb:decode_msg(Binary, heartbeat_req),
                   mod_base:heartbeat(Msg, State)
           end,
    handle_resp_maps(Maps);
dispatch_msg(Cmd, _Binary, _State) ->
    #{error => {not_defined_cmd, Cmd}, err_lvl => ?E_WARNING}.

-spec handle_pass(ege_msg:cmd16(), ege_msg:request(), ege_msg:state()) -> ege_msg:resp_maps() | skip.
handle_pass(_Cmd, _Binary, _State) -> skip.

-spec handle_resp_maps(map()) -> ege_msg:resp_maps().
handle_resp_maps(Maps) ->
    case maps:find(msg_list, Maps) of
        {ok, MsgList} ->
            BinList = [encode_resp_msg(Msg) || Msg <- MsgList],
            case maps:find(resp_bin_list, Maps) of
                {ok, RespBinList} ->
                    Maps#{resp_bin_list => BinList ++ RespBinList};
                error ->
                    Maps#{resp_bin_list => BinList}
            end;
        error -> Maps
    end.

%% just req
-spec encode_req_msg(ege_msg:msg()) -> binary().
encode_req_msg(Msg) ->
    encode_req_msg(element(1, Msg), Msg).
-spec encode_req_msg(atom(), ege_msg:msg()) -> binary().
encode_req_msg(heartbeat_req, Msg) ->
    RespBinary = msg_base_pb:encode_msg(Msg),
    <<?CMD_MSG_BASE_HEARTBEAT_REQ:16, RespBinary/binary>>.

%% just resp
-spec encode_resp_msg(ege_msg:msg()) -> binary().
encode_resp_msg(Msg) ->
    encode_resp_msg(element(1, Msg), Msg).
-spec encode_resp_msg(atom(), ege_msg:msg()) -> binary().
encode_resp_msg(heartbeat_resp, Msg) ->
    RespBinary = msg_base_pb:encode_msg(Msg),
    <<?CMD_MSG_BASE_HEARTBEAT_RESP:16, RespBinary/binary>>.

%% just req
-spec decode_req_msg(binary()) -> ege_msg:msg().
decode_req_msg(<<?CMD_MSG_BASE_HEARTBEAT_REQ:16, Binary/binary>>) ->
    msg_base_pb:decode_msg(Binary, heartbeat_req).

%% just resp
-spec decode_resp_msg(binary()) -> ege_msg:msg().
decode_resp_msg(<<?CMD_MSG_BASE_HEARTBEAT_RESP:16, Binary/binary>>) ->
    msg_base_pb:decode_msg(Binary, heartbeat_resp).

-spec msg_type(ege_msg:cmd16()) -> atom().
msg_type(0) -> heartbeat_req;
msg_type(1) -> heartbeat_resp.

-spec msg_cmd(atom()) -> ege_msg:cmd().
msg_cmd(msg_base) -> 0.

-spec msg_ccmd(atom()) -> ege_msg:ccmd().
msg_ccmd(heartbeat_req) -> 0;
msg_ccmd(heartbeat_resp) -> 1.

-spec msg_cmd16(atom()) -> ege_msg:cmd16().
msg_cmd16(heartbeat_req) -> 0;
msg_cmd16(heartbeat_resp) -> 1.