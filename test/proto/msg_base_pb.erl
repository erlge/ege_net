%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.27.5
-module(msg_base_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_c_cmd/1, enum_value_by_symbol_c_cmd/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("msg_base_pb.hrl").
-include("gpb.hrl").



-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    verify_msg(Msg, Opts),
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #heartbeat_req{} ->
	  e_msg_heartbeat_req(Msg, TrUserData);
      #heartbeat_resp{} ->
	  e_msg_heartbeat_resp(Msg, TrUserData)
    end.



e_msg_heartbeat_req(Msg, TrUserData) ->
    e_msg_heartbeat_req(Msg, <<>>, TrUserData).


e_msg_heartbeat_req(#heartbeat_req{id = F1}, Bin,
		    TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_heartbeat_resp(Msg, TrUserData) ->
    e_msg_heartbeat_resp(Msg, <<>>, TrUserData).


e_msg_heartbeat_resp(#heartbeat_resp{id = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.



e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      heartbeat_req -> d_msg_heartbeat_req(Bin, TrUserData);
      heartbeat_resp -> d_msg_heartbeat_resp(Bin, TrUserData)
    end.



d_msg_heartbeat_req(Bin, TrUserData) ->
    dfp_read_field_def_heartbeat_req(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_heartbeat_req(<<8, Rest/binary>>, Z1,
				 Z2, F1, TrUserData) ->
    d_field_heartbeat_req_id(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_heartbeat_req(<<>>, 0, 0, F1, _) ->
    #heartbeat_req{id = F1};
dfp_read_field_def_heartbeat_req(Other, Z1, Z2, F1,
				 TrUserData) ->
    dg_read_field_def_heartbeat_req(Other, Z1, Z2, F1,
				    TrUserData).

dg_read_field_def_heartbeat_req(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_heartbeat_req(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_heartbeat_req(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_heartbeat_req_id(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_heartbeat_req(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_heartbeat_req(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_heartbeat_req(Rest, 0, 0, F1,
						    TrUserData);
	    3 ->
		skip_group_heartbeat_req(Rest, Key bsr 3, 0, F1,
					 TrUserData);
	    5 -> skip_32_heartbeat_req(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_heartbeat_req(<<>>, 0, 0, F1, _) ->
    #heartbeat_req{id = F1}.

d_field_heartbeat_req_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, TrUserData)
    when N < 57 ->
    d_field_heartbeat_req_id(Rest, N + 7, X bsl N + Acc, F1,
			     TrUserData);
d_field_heartbeat_req_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_heartbeat_req(Rest, 0, 0, NewFValue,
				     TrUserData).


skip_varint_heartbeat_req(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    skip_varint_heartbeat_req(Rest, Z1, Z2, F1, TrUserData);
skip_varint_heartbeat_req(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    dfp_read_field_def_heartbeat_req(Rest, Z1, Z2, F1,
				     TrUserData).


skip_length_delimited_heartbeat_req(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_heartbeat_req(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
skip_length_delimited_heartbeat_req(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_heartbeat_req(Rest2, 0, 0, F1,
				     TrUserData).


skip_group_heartbeat_req(Bin, FNum, Z2, F1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_heartbeat_req(Rest, 0, Z2, F1,
				     TrUserData).


skip_32_heartbeat_req(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_heartbeat_req(Rest, Z1, Z2, F1,
				     TrUserData).


skip_64_heartbeat_req(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_heartbeat_req(Rest, Z1, Z2, F1,
				     TrUserData).


d_msg_heartbeat_resp(Bin, TrUserData) ->
    dfp_read_field_def_heartbeat_resp(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_heartbeat_resp(<<8, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_heartbeat_resp_id(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_heartbeat_resp(<<>>, 0, 0, F1, _) ->
    #heartbeat_resp{id = F1};
dfp_read_field_def_heartbeat_resp(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_heartbeat_resp(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_heartbeat_resp(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_heartbeat_resp(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_heartbeat_resp(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_heartbeat_resp_id(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_heartbeat_resp(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_heartbeat_resp(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_heartbeat_resp(Rest, 0, 0, F1,
						     TrUserData);
	    3 ->
		skip_group_heartbeat_resp(Rest, Key bsr 3, 0, F1,
					  TrUserData);
	    5 -> skip_32_heartbeat_resp(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_heartbeat_resp(<<>>, 0, 0, F1, _) ->
    #heartbeat_resp{id = F1}.

d_field_heartbeat_resp_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_heartbeat_resp_id(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_heartbeat_resp_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_heartbeat_resp(Rest, 0, 0, NewFValue,
				      TrUserData).


skip_varint_heartbeat_resp(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_heartbeat_resp(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_heartbeat_resp(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_heartbeat_resp(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_heartbeat_resp(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_heartbeat_resp(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_heartbeat_resp(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_heartbeat_resp(Rest2, 0, 0, F1,
				      TrUserData).


skip_group_heartbeat_resp(Bin, FNum, Z2, F1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_heartbeat_resp(Rest, 0, Z2, F1,
				      TrUserData).


skip_32_heartbeat_resp(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_heartbeat_resp(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_heartbeat_resp(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_heartbeat_resp(Rest, Z1, Z2, F1,
				      TrUserData).




read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).


merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #heartbeat_req{} ->
	  merge_msg_heartbeat_req(Prev, New, TrUserData);
      #heartbeat_resp{} ->
	  merge_msg_heartbeat_resp(Prev, New, TrUserData)
    end.

merge_msg_heartbeat_req(#heartbeat_req{},
			#heartbeat_req{id = NFid}, _) ->
    #heartbeat_req{id = NFid}.

merge_msg_heartbeat_resp(#heartbeat_resp{},
			 #heartbeat_resp{id = NFid}, _) ->
    #heartbeat_resp{id = NFid}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #heartbeat_req{} ->
	  v_msg_heartbeat_req(Msg, [heartbeat_req], TrUserData);
      #heartbeat_resp{} ->
	  v_msg_heartbeat_resp(Msg, [heartbeat_resp], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_heartbeat_req/3}).
v_msg_heartbeat_req(#heartbeat_req{id = F1}, Path, _) ->
    v_type_uint64(F1, [id | Path]), ok.

-dialyzer({nowarn_function,v_msg_heartbeat_resp/3}).
v_msg_heartbeat_resp(#heartbeat_resp{id = F1}, Path,
		     _) ->
    v_type_uint64(F1, [id | Path]), ok.

-dialyzer({nowarn_function,v_type_uint64/2}).
v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{enum, c_cmd},
      [{heartbeat_req, 0}, {heartbeat_resp, 1}]},
     {{msg, heartbeat_req},
      [#field{name = id, fnum = 1, rnum = 2, type = uint64,
	      occurrence = required, opts = []}]},
     {{msg, heartbeat_resp},
      [#field{name = id, fnum = 1, rnum = 2, type = uint64,
	      occurrence = required, opts = []}]}].


get_msg_names() -> [heartbeat_req, heartbeat_resp].


get_group_names() -> [].


get_msg_or_group_names() ->
    [heartbeat_req, heartbeat_resp].


get_enum_names() -> [c_cmd].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(heartbeat_req) ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint64,
	    occurrence = required, opts = []}];
find_msg_def(heartbeat_resp) ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint64,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(c_cmd) ->
    [{heartbeat_req, 0}, {heartbeat_resp, 1}];
find_enum_def(_) -> error.


enum_symbol_by_value(c_cmd, Value) ->
    enum_symbol_by_value_c_cmd(Value).


enum_value_by_symbol(c_cmd, Sym) ->
    enum_value_by_symbol_c_cmd(Sym).


enum_symbol_by_value_c_cmd(0) -> heartbeat_req;
enum_symbol_by_value_c_cmd(1) -> heartbeat_resp.


enum_value_by_symbol_c_cmd(heartbeat_req) -> 0;
enum_value_by_symbol_c_cmd(heartbeat_resp) -> 1.


get_service_names() -> [msg_base_service].


get_service_def(msg_base_service) ->
    {{service, msg_base_service},
     [#rpc{name = heartbeat, input = heartbeat_req,
	   output = heartbeat_resp, input_stream = false,
	   output_stream = false, opts = []}]};
get_service_def(_) -> error.


get_rpc_names(msg_base_service) -> [heartbeat];
get_rpc_names(_) -> error.


find_rpc_def(msg_base_service, RpcName) ->
    find_rpc_def_msg_base_service(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_msg_base_service(heartbeat) ->
    #rpc{name = heartbeat, input = heartbeat_req,
	 output = heartbeat_resp, input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_msg_base_service(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_tuple(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.27.5".

gpb_version_as_list() ->
    [3,27,5].
